# Классы и объекты - это основа объектно-ориентированного программирования 
# (ООП) в Python.

# Классы позволяют создавать собственные типы данных, которые могут содержать
# как данные, так и методы для работы с этими данными. Объекты - это экземпляры
# классов, которые могут иметь свои собственные значения атрибутов и состояния.
#
# Классы и объекты позволяют организовать код в более структурированном виде,
# что делает его более читаемым и поддерживаемым. Они также позволяют использовать
# наследование, полиморфизм и инкапсуляцию, что является основными принципами ООП.
#
# Классы и объекты позволяют создавать более сложные структуры данных и
# алгоритмы, которые могут быть использованы для решения различных задач.

# Пример класса и объекта

class Person:
    # Конструктор класса
    def __init__(self, name, age):
        self.name = name  # атрибут объекта
        self.age = age    # атрибут объекта


p = Person("Alice", 30)  # создание объекта класса Person
print(p.name)  # доступ к атрибуту объекта

#методы класса
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):  # метод класса
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")


#


class Animal:
    def speak(self):
        print("Я животное")

class Dog(Animal):
    def speak(self):
        print("Гав!")

some_animal = Animal()
some_animal.speak()  # Я животное

dog = Dog()
dog.speak()  # Гав!


class Dog(Animal):
    def speak(self):
        super().speak()
        print("И я гавкаю!")





# Пример класса
class Car:
    wheels = 4  # атрибут класса

    def __init__(self, brand):
        self.brand = brand  # атрибут объекта

    def drive(self):  # обычный метод
        print(f"{self.brand} is driving")

    @classmethod # метод класса
    def default_car(cls):
        return cls("Toyota") 

    @staticmethod # статический метод
    def honk(): 
        print("Beep!") # статический метод не принимает аргументы



# чтобы создать класс, пишем class, затем имя класса (с большой буквы)
# и двоеточие
class Car:
    name = "Vehicle"  # атрибут класса 
    # __init__ - это специальный метод, который вызывается при создании объекта
    # Он используется для инициализации атрибутов объекта. Это не метод класса,
    # а метод экземпляра, который принимает аргументы, переданные при создании объекта.
    # self - это ссылка на текущий объект, который создается. Он позволяет
    # обращаться к атрибутам и методам объекта внутри класса, 
    # то есть к самому объекту.
    # проще говоря, self нужно для Car.brand, но внутри класса, без него, методы не могут 
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model


    # обычный метод, который принимает аргументы
    # self - это ссылка на текущий объект, который создается. Он позволяет
    # обращаться к атрибутам и методам объекта внутри класса,
    # то есть к самому объекту.
    def drive(self):
        print(f"{self.brand} {self.model} is driving")

    # класс-метод - это метод, который принимает класс в качестве первого аргумента
    # и может быть вызван на самом классе, а не на экземпляре класса.
    # Он используется для создания методов, которые работают с классом в целом,
    # а не с конкретным объектом.
    @classmethod
    def get_full_name(cls):
        return f"{cls.name} {cls.brand} {cls.model}"
    
    # статический метод 
    @staticmethod
    def honk():
        print("Beep beep!")
    # cтатический метод нужен для создания методов, которые не зависят 
    # от состояния объекта и не требуют доступа к атрибутам или методам класса.


car1 = Car("Toyota", "Camry")   # создание объекта класса Car
car2 = Car("Honda", '')         # создание другого объекта класса Car

print(car1.brand)   # доступ к атрибуту объекта
print(car2.brand)   # доступ к атрибуту объекта
print(car1.model)   # доступ к атрибуту объекта
print(car2.name)    # доступ к атрибуту объекта


# У класса есть атрибут и метод
# car1.drive()  # вызов метода объекта
# car1.brand    # вызов атрибута объекта


