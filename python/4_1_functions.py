# Функция (def) - это именованный блок кода, 
# который можно вызывать в любом месте программы.
# Функции позволяют избежать дублирования кода и делают его более читаемым.
# Функции могут принимать аргументы (входные данные) 
# и возвращать значения (выходные данные).
# Функции могут быть определены с помощью ключевого слова def,
# за которым следует имя функции, круглые скобки с аргументами и двоеточие. 

def function_name(arg1, arg2):
    # тело функции
    # код, который будет выполнен при вызове функции
    result = arg1 + arg2  # пример операции
    print("Результат:", result)  # вывод результата на экран
    return result  # возвращаемое значение (необязательно)

# Вызов функции
result = function_name(5, 10)  # передаем аргументы в функцию

def function_with_default_args(arg1, arg2=10):
    return arg1 + arg2

def get_full_name():
    return "Adil", "Mustafa" # возвращаем кортеж из двух значений


# *args - это специальный синтаксис,
# который позволяет передавать переменное количество аргументов в функцию.
# когда надо принять в функция аргументы, но не понятно сколько их будет.
def function_with_var_args(*args): 
    for arg in args:
        print(arg)
    return sum(args)  # возвращаем сумму всех аргументов

# **kwargs - это специальный синтаксис,
# который позволяет передавать переменное количество именованных аргументов в функцию.
# когда надо передать в функцию аргументы в виде словаря.
def function_with_var_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")
    return kwargs  # возвращаем словарь аргументов

# можно комбинировать *args и **kwargs в одной функции
def function_with_args_kwargs(arg1, *args, **kwargs):
    print(f"arg1: {arg1}")
    print("args:", args)
    print("kwargs:", kwargs)
    return arg1, args, kwargs  # возвращаем все аргументы

function_with_args_kwargs(1, 2, 3, key1="value1", key2="value2")

# функции могут быть переданы как аргументы другим функциям
# это позволяет создавать более гибкие и модульные программы.
# Функции высшего порядка - это функции, которые принимают другие функции в качестве аргументов
# или возвращают функции в качестве результата.
def double(x):
    return x * 2

def apply(func, value):
    return func(value)

apply(double, 10)  # 20


# порядок видов аргументов
def func(a, b=2, *args, **kwargs):
    ...
func(1, 3, 4, 5, key="value")

# Аннотации типов (PEP 484) - это способ указать типы аргументов 
# и возвращаемого значения функции.
# если тут не будут инт, то будет ошибка:
def add(a: int, b: int) -> int: 
    return a + b



# генераторы - это функции, которые используют ключевое слово yield
# вместо return для возврата значений.
# Генераторы позволяют создавать итераторы, 
# которые могут быть использованы для перебора последовательностей данных.
def count_up_to(n):
    i = 1
    while i <= n:
        yield i
        i += 1

